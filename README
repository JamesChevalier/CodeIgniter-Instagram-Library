=== CodeIgniter Instagram Library

This library provides a CodeIgniter application access to the Instagram API.


=== Pre-requisites

* A functional CodeIgniter application
* A registered client with Instagram - this can be completed at http://instagram.com/developer/
- Set the OAuth redirect_uri of your registered client to http://YOURDOMAIN/instagramredirect


=== Configuration for Development

* Copy the files within the application/libraries folder to the application/libraries folder in your CodeIgniter application
* Copy the application/controllers/instagram.php file to the application/controllers folder in your CodeIgniter application
* Enter your registered client details, supplied by Instagram, into this library's application/config/config.php file
* Copy the contents of this library's application/config/config.php file into your CodeIgniter application's config.php file
* Authorize your CodeIgniter application to use your Instagram account by using the provided Controller & entering the access token into the corresponding configuration variable
* Add the following code to your Controller to load the library, set the required variables, and set the access token:
$this->load->library('instagram_api');
$ig_client_id = $this->config->item('instagram_client_id');
$ig_client_secret = $this->config->item('instagram_client_secret');
$ig_redirect_uri = $this->config->item('instagram_redirect_uri');
$this->instagram_api->access_token = $this->config->item('instagram_access_token');
* Use the Function Reference section of this README (below) to make calls to the Instagram API


=== Notes

The Controller provided in this library (and the explanation of Authorization, above) is only for authorizing your CodeIgniter application with your own account in order to allow easier development and testing.  You will need to create your own authorization methods for multi-user CodeIgniter applications.

This library uses Jamie Rumbelow's MY_input.php class to allow ? in CodeIgniter URLs. For more information visit http://www.jamierumbelow.net and see the MY_Input.php file included in application/libraries.


=== Function Reference

This section of the README is a working list: more functions/features will be added/updated as soon as possible.
A sample of the function results can be seen at http://ianluckraft.co.uk/demonstrations/instagram-library/welcome/

All Instagram API functions, apart from getPopularMedia(), require an access token which Instagram supplies through OAuth.  This requirement is handled by obtaining the access token, and then setting "$this->instagram_api->access_token" after loading this library.

In cases of the USERS endpoint of the Instagram API, where the passed variable is "$userid", you may substitute the string "self" to return the authenticated user's information.

Use can use this general code format to make a function call and display it's relevant output:
	$igdata = $this->instagram_api->getUserFeed("self");
	$igres = $igdata->data;
	echo "<pre>";
	print_r($igres);
	echo "</pre>";


Get basic information about a user:
$this->instagram_api->getUser($user_id);
* $user_id is either the ID of a user or "self" (with the quotes)

See the authenticated user's feed:
$this->instagram_api->getUserFeed($max, $min, $count);
* $max (optional) Return media earlier than this max_id
* $min (optional) Return media later than this min_id
* $count (optional) Count of media to return

Get the most recent media published by a user:
$this->instagram_api->getUserRecent($user_id, $max_id, $min_id, $count, $max_timestamp, $min_timestamp);
* $user_id is either the ID of a user or "self" (with the quotes)
* $max (optional) Return media earlier than this max_id
* $min (optional) Return media later than this min_id
* $count (optional) Count of media to return
* $max_timestamp (optional) Return media after this UNIX timestamp
* $min_timestamp (optional) Return media before this UNIX timestamp

See the authenticated user's list of media they've liked:
$this->instagram_api->getUserLikes($user_id, $max_id, $count);
* $user_id is either the ID of a user or "self" (with the quotes)
* $max_id (optional) Return media liked before this id
* $count (optional) Count of media to return
* This list is ordered by the order in which the user liked the media
* Private media is returned as long as the authenticated user has permission to view that media
* Liked media lists are only available for the currently authenticated user.

Search for a user by name:
$this->instagram_api->userSearch($query, $count);
* $query A query string
* $count (optional) Number of users to return

--- Still editing below this line ---

Get users a user follows:
$this->instagram_api->userFollows($user_id);
* $user_id is either the ID of a user or "self" (with the quotes)

Get a user's followers:
$this->instagram_api->userFollowedBy($user_id);
* $user_id is either the ID of a user or "self" (with the quotes)

Produce the link required to authorize Instagram:
$this->instagram_api->instagramLogin($ig_client_id, $ig_redirect_uri);

Authorize to Instagram:
$this->instagram_api->authorize($ig_client_id, $ig_client_secret, $ig_redirect_uri, $code);

Get the latest popular photos:
$this->instagram_api->getPopularMedia($ig_client_id);


$this->instagram_api->userRequestedBy();


$this->instagram_api->userRelationship($user_id);


$this->instagram_api->modifyUserRelationship($user_id, $action);


$this->instagram_api->getMedia($media_id);


$this->instagram_api->mediaSearch($latitude = null, $longitude = null, $max_timestamp = null, $min_timestamp = null, $distance = null);


$this->instagram_api->popularMedia();


$this->instagram_api->mediaComments($media_id);


$this->instagram_api->postMediaComment($media_id);


$this->instagram_api->deleteMediaComment($media_id, $comment_id);


$this->instagram_api->mediaLikes($media_id);


$this->instagram_api->postLike($media_id);


$this->instagram_api->removeLike($media_id);


$this->instagram_api->getTags($tag);


$this->instagram_api->tagsRecent($tag, $max_id = null, $min_id = null);


$this->instagram_api->tagsSearch($tag);


$this->instagram_api->getLocation($location);


$this->instagram_api->locationRecent($location, $max_id = null, $min_id = null, $max_timestamp = null, $min_timestamp = null);


$this->instagram_api->locationSearch($latitude = null, $longitude = null, $foursquare_id = null, $distance = null);